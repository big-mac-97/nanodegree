import sys
import pandas as pd
import numpy as np

import sqlite3
import sqlalchemy
from sqlalchemy import create_engine
import pickle

import matplotlib.pyplot as plt

import nltk
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import make_multilabel_classification
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import classification_report


def load_data(database_filename):
    """
    Imports messages data generated by process_data.py from the database specified.

    Parameters:
    database_filename: database filepath

    Returns:
    X: model features (dataframe containing un-processed messages)
    Y: model targets (dataframe containing category allocations)
    """
    # load data from database
    engine = create_engine(f'sqlite:///{database_filepath}')
    df = pd.read_sql_table("disaster_messages", con=engine)
    X = df['message']
    Y = df.iloc[:, 4:]
    category_names = df.columns[4:]
    return X, Y, category_names


def tokenize(text):
    """
    Tokenizes and lemmatizes a text input (used to tokenize and lemmatize the message data).

    Based on the tokenizer functions used in the ML Pipeline classes

    Parameters:
    text: text to be tokenized/lemmatized

    Returns:
    clean_tokens: tokenized and lemmatized text
    """

    tokens = word_tokenize(text)
    lemmatizer = WordNetLemmatizer()

    clean_tokens = []
    for tok in tokens:
        clean_tok = lemmatizer.lemmatize(tok).lower().strip()
        clean_tokens.append(clean_tok)

    return clean_tokens


def build_model():
    """
    Builds classifier pipeline and tunes model using GridSearchCV.

    Returns:
    cv: classifier
    """

    pipeline = Pipeline([

        ('vect', CountVectorizer(tokenizer=tokenize)),
        ('tfidf', TfidfTransformer()),
        ('clf', MultiOutputClassifier(RandomForestClassifier()))

    ])

    parameters = {
        'vect__ngram_range': ((1, 1), (1, 2)),
        'vect__max_df': (0.5, 0.75, 1.0),
        'tfidf__use_idf': (True, False)

    }

    cv = GridSearchCV(pipeline, param_grid=parameters)

    return cv


def evaluate_model(model, X_test, y_test, category_names):
    """
    Evaluates the performance of the fitted ML model and generates classification reports for each of the categories.

    Parameters:
    model: tuned classifier
    X_test: test dataset messages
    y_test: categorical data corresopnding to messages in X_test

    Returns:
    Classifcation reports for each category
    """
    y_pred = model.predict(X_test)

    for index, column in enumerate(category_names):
        print(column, classification_report(y_test[column], y_pred[:, index]))



def save_model(model, model_filepath):
    pickle.dump(model, open(model_filepath))


def main():
    if len(sys.argv) == 3:
        database_filepath, model_filepath = sys.argv[1:]
        print('Loading data...\n    DATABASE: {}'.format(database_filepath))
        X, Y, category_names = load_data(database_filepath)
        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)
        
        print('Building model...')
        model = build_model()
        
        print('Training model...')
        model.fit(X_train, Y_train)
        
        print('Evaluating model...')
        evaluate_model(model, X_test, Y_test, category_names)

        print('Saving model...\n    MODEL: {}'.format(model_filepath))
        save_model(model, model_filepath)

        print('Trained model saved!')

    else:
        print('Please provide the filepath of the disaster messages database '\
              'as the first argument and the filepath of the pickle file to '\
              'save the model to as the second argument. \n\nExample: python '\
              'train_classifier.py ../data/DisasterResponse.db classifier.pkl')


if __name__ == '__main__':
    main()